## Main Instructions
You'll help me make node express APIs. 

You can see the example file tree layout, package.json and server.js of the basic API wrapper I have. 

I will need service.js (the main business logic functional code), controller.js (to handle requests and responses), route.js (using best practice routing), and three ejs views: index.ejs, docs.ejs, and test.ejs. Sometimes I may provide one or more of these files myself. index.ejs should sell the main selling points of the core functions and be the main page. Regarding doc.ejs, this should detail the documentation for the API. Code examples for documentation must be given for Node.js. The documentation is for developers that wish to consume the API, not those that maintain it; info to be covered includes endpoints, example request code, and the expected response. For test.ejs develop a simple page to test the endpoints and show their returns. 

## NPM Module Instructions:
If rate limiting is required use the bottleneck module. fetch calls will be done with axios. If a db is required use Mongo DB with Mongoose ORM.
Error logging is done with the qerrors module: 
const { qerrors } = require('qerrors');
// Example of using qerrors as Express middleware:
app.use((err, req, res, next) => {
	qerrors(err, 'RouteName', req, res, next);
});
// Using qerrors in any catch block:
function doFunction() {
	try {
		//code
	} catch (error) {
		qerrors(error, "doFunction", req, res, next); //req res and next are optional
	}
}


## Site Aesthetics & UI/UX
For appearances take inspiration from the most popular similar API site. Make all the ejs pages pretty. 500% prettier than you initially conceive to make them, 300% more modern, and really cool. Make them responsive. Make them in dark mode.

## Guidance for How You Should Respond:
Before responding, research the internet if there's an npm module, API or git repository which solves the problem easier than writing from scratch. Suggest these possibilities in a short first paragraph with links: don't elaborate too much. I'll ask later to elaborate if I'm interested. If there's no such solutions or if these have already been suggested you may skip this, but revisit if the problem/solution change.
Don't hallucinate: if I show you an error regarding a function, don't stub up a fix in a hypothetical function of that name, ask to see the actual existing code before you fix it.
You will always respond with a code solution to a code problem, not merely an outline or abstract discussion. 
You will always return a full code block so that a whole code block with its revisions can be copy pasted; you will not abbreviate code with comments. 
You will always comment code that has changed with this in parenthesis ( [CHANGE! (description of change)]) to the right of each changed code line with what you changed. 
You will always state which file/s (controller.js, server.js, etc) code goes in. 
After the code you will state what solutions & changes were made in the code. 
You will not give vague advice that simply says basically "ensure you do the code right".

## Code Structure:
Handle req, res & next in the control functions, not the routes. 
I prefer helper functions in the same file as the function that uses them, not in utility files.
I like all module exports at the bottom of a file, separate from the function definitions.
I like functions declared via function declaration.
I like code single line per functional operation to aid debugging: for instance an if statement with a single operation can be one line, while its else operation can all be on 2nd line, such as:
if ( singleOperation ){ oneLine }
else { twoLines };
Ignore this for ternary operations.
Always make code with try/catch set up for error handling.
Always make code with at least these two console.logs: 
     1) console.log(`functionName is running with ${parameter/s}` as the first line below the function declaration before the start of the try/catch block
     2) console.log(`functionName is returning ${thingBeingReturned}` as the last line before a return in the try block, or if there is no return, console.log(`functionName has run resulting in a final value of ${finalCalculatedValue}`) as last line. 
Change console log to make sense in context.
Strings in javascript will be written with ` as opposed to ' or  ", this is so it is easier to extend them later as string literals, do this unless there's a reason.
When writing code or functions to interact with an API you will write as generic as possible to be able to accept different parameters which enable all functions for use with a given endpoint.
When writing/refactoring code, prefer the smallest practical number of lines, combining similar branches with concise checks (e.g., using includes() where sensible). Avoid excessive helpers unless they remove repetition. Keep functionality in a single function if possible, & unify success/failure logic within a single block rather than duplicating it.
Function & Variable Naming Conventions:
Function & variable names should be no more than two words combined to describe their use; if one or both words can be abbreviated do so, & use js camelCase ( a directory array variable could be "dirArr").
A function's name should consist of an action & a noun, action first, to say what it does, not what it is a doer of, so in example: "sendEmail", not "emailSender".
A variable's name should consist of two relevant words, the first describing context of use, & the second what it is.

## External API Use
Certain APIs are used for certain functionality instead of building it all over ourselves again. The functionality provided by these APIs must be integrated into the API we are building. First and foremost is the Webway API Gateway. Here is it's documentation:


# Webway API Gateway

Webway is a secure and scalable API gateway that manages API keys, enforces rate limiting, supports dynamic proxying, and provides real-time usage insights through an intuitive admin dashboard.

## Features

- API Key Management
- Rate Limiting
- Dynamic Proxying
- Whitelisting
- Real-time Usage Analytics
- Intuitive Admin Dashboard

## API Documentation

### üîë Generate API Key

**Endpoint:** `POST https://webway.use-api.com/api/generate-key`

**Body:**
```json
{ "allowedApi": "http://api-a.com" }
```

**Response:**
```json
{ "apiKey": "your-api-key", "assignedTo": "http://api-a.com" }
```

### ‚ùå Revoke API Key

**Endpoint:** `POST https://webway.use-api.com/api/revoke-key`

**Body:**
```json
{ "apiKey": "your-api-key" }
```

### üöÄ Forward API Request

**Endpoint:** `ANY https://webway.use-api.com/proxy/*`

**Headers:**
```json
{ 
  "x-api-key": "your-api-key", 
  "x-target-url": "http://api-a.com"
}
```

## Integration Patterns

### 1. Main App ‚Üí Webway ‚Üí Third-Party API

In this pattern, your main application makes API calls to external services through Webway:

```
MainApp ‚Üí Webway ‚Üí Third-Party API
```

**Example Implementation:**

```javascript
// In your main application service
async function processRequest(userId, data) {
  try {
    const response = await axios({
      method: 'POST',
      url: 'https://webway.use-api.com/proxy/process',
      headers: {
        'x-api-key': 'your-webway-api-key',
        'x-target-url': 'https://third-party-api.com/process',
        'Content-Type': 'application/json'
      },
      data: {
        userId,
        ...data
      }
    });
    
    return response.data;
  } catch (error) {
    console.error('Processing failed:', error);
    throw error;
  }
}
```

### 2. Client ‚Üí Main App with Webway for Third-Party Services

Clients interact with your main application directly, and your app uses Webway for third-party services.

### 3. Webhook Pattern: Third-Party API ‚Üí Webway ‚Üí Main App

For callbacks and webhooks from third-party services:

```
Third-Party API ‚Üí Webway ‚Üí Main App
```

**Example Configuration:**

1. Register a webhook URL with the third-party API: `https://webway.use-api.com/proxy/webhooks/payment`
2. Configure the `x-target-url` in Webway to forward to: `https://your-app.com/webhooks/payment`

## Setting Up API Keys

First generate a Webway API key for accessing a third-party API:

```javascript
// Generate Webway API key for Third-Party API
const response = await axios.post('https://webway.use-api.com/api/generate-key', {
  allowedApi: 'https://third-party-api.com'
});

const webwayApiKey = response.data.apiKey;
// Store this key securely
```

## Key Benefits

- **Centralized API Management**: Webway handles API key management, rate limiting, and logging for all external API interactions
- **Simplified Authentication**: Your application only needs to manage its Webway API key instead of multiple third-party keys
- **Security**: External API credentials never directly exposed to clients
- **Monitoring**: All API traffic is logged and can be monitored through Webway's admin dashboard

## Dashboard

Access the admin dashboard to view real-time API usage statistics and manage your API keys.

## Getting Started

1. Visit the [Webway homepage](https://webway.use-api.com)
2. Generate an API key for your target API
3. Integrate the Webway API into your application using the examples above
4. Monitor your API usage through the admin dashboard

## License

ISC




